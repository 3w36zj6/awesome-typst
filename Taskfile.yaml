# https://taskfile.dev

version: '3'

vars:
  BROKEN_LINKS_REPORT: broken-links-report.md

tasks:
  default:
    - task: lint

  lint:
    desc: Run all linters.
    deps:
      - task: lint:broken-links
      - task: lint:editorconfig

  lint:editorconfig:
    desc: Check that files follow .editorconfig rules.
    cmds:
      - '{{.EC}}'
    vars:
      EC_VERSION: v3.0.3
      EC: go run github.com/editorconfig-checker/editorconfig-checker/v3/cmd/editorconfig-checker@{{.EC_VERSION}}

  lint:broken-links:
    desc: Use xurls to check markdown files for broken links.
    cmds:
      - "{{.XURLS}} *.md | sort -u | grep -Ev '{{.RE_IGNORE}}' | {{.XURLS}} -fix >/dev/null 2> >(tee {{.BROKEN_LINKS_REPORT}} >&2)"
    vars:
      XURLS_VERSION: v2.5.0
      XURLS: go run mvdan.cc/xurls/v2/cmd/xurls@{{.XURLS_VERSION}}
      URL_IGNORE_LIST: |
        instagram.com
        linkedin.com
        marketplace.visualstudio.com
        twitter.com
      RE_IGNORE: '{{splitList "\n" .URL_IGNORE_LIST | join "|" | trimSuffix "|"}}'

  lint:broken-links:create-gh-issue:
    desc: Create a GitHub issue based on a broken links report.
    aliases: [gh]
    preconditions:
      - test -f {{.BROKEN_LINKS_REPORT}}
    cmds:
      - >-
        echo TODO - TEST AND IMPLEMENT:
        gh issue create
        --title "Broken Links Report $(date +%s)"
        --body-file {{.BROKEN_LINKS_REPORT}}
        --label broken-links
        --label 'automated-issue'

  clean:
    desc: Remove generated files.
    cmds:
      - rm -f {{.BROKEN_LINKS_REPORT}}
